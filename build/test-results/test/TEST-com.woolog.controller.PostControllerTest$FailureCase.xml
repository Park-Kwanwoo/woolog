<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="실패 케이스" tests="6" skipped="0" failures="0" errors="0" timestamp="2024-11-18T13:27:44" hostname="baggwan-uui-MacBookPro.local" time="0.275">
  <properties/>
  <testcase name="게시글 수정 실패" classname="com.woolog.controller.PostControllerTest$FailureCase" time="0.209"/>
  <testcase name="내용이 존재하지 않을 때" classname="com.woolog.controller.PostControllerTest$FailureCase" time="0.021"/>
  <testcase name="게시글 단건 조회 실패" classname="com.woolog.controller.PostControllerTest$FailureCase" time="0.011"/>
  <testcase name="제목이 존재하지 않을 때" classname="com.woolog.controller.PostControllerTest$FailureCase" time="0.008"/>
  <testcase name="게시글 삭제 실패" classname="com.woolog.controller.PostControllerTest$FailureCase" time="0.009"/>
  <testcase name="제목과 내용이 존재하지 않을 때" classname="com.woolog.controller.PostControllerTest$FailureCase" time="0.007"/>
  <system-out><![CDATA[2024-11-18T22:27:44.459+09:00  INFO 4677 --- [    Test worker] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.woolog.controller.PostControllerTest$FailureCase]: FailureCase does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2024-11-18T22:27:44.460+09:00  INFO 4677 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.woolog.WoologApplication for test class com.woolog.controller.PostControllerTest$FailureCase

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.3.4)

2024-11-18T22:27:44.471+09:00  INFO 4677 --- [    Test worker] c.woolog.controller.PostControllerTest   : Starting PostControllerTest using Java 21.0.2 with PID 4677 (started by ganoo in /Users/ganoo/study/woolog)
2024-11-18T22:27:44.471+09:00  INFO 4677 --- [    Test worker] c.woolog.controller.PostControllerTest   : No active profile set, falling back to 1 default profile: "default"
2024-11-18T22:27:44.524+09:00  INFO 4677 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-11-18T22:27:44.527+09:00  INFO 4677 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 3 ms. Found 1 JPA repository interface.
2024-11-18T22:27:44.562+09:00  INFO 4677 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-11-18T22:27:44.563+09:00  INFO 4677 --- [    Test worker] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-11-18T22:27:44.566+09:00  INFO 4677 --- [    Test worker] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-11-18T22:27:44.567+09:00  INFO 4677 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
2024-11-18T22:27:44.567+09:00  INFO 4677 --- [    Test worker] com.zaxxer.hikari.pool.HikariPool        : HikariPool-2 - Added connection conn10: url=jdbc:h2:mem:woolog user=SA
2024-11-18T22:27:44.567+09:00  INFO 4677 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
2024-11-18T22:27:44.583+09:00  INFO 4677 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: 
    drop table if exists post cascade 
Hibernate: 
    create table post (
        id bigint generated by default as identity,
        title varchar(255),
        content clob,
        primary key (id)
    )
2024-11-18T22:27:44.585+09:00  INFO 4677 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-11-18T22:27:44.619+09:00  WARN 4677 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-11-18T22:27:44.669+09:00  INFO 4677 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:woolog'
2024-11-18T22:27:44.685+09:00  INFO 4677 --- [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2024-11-18T22:27:44.685+09:00  INFO 4677 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2024-11-18T22:27:44.686+09:00  INFO 4677 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 0 ms
2024-11-18T22:27:44.690+09:00  INFO 4677 --- [    Test worker] c.woolog.controller.PostControllerTest   : Started PostControllerTest in 0.228 seconds (process running for 2.639)
Hibernate: 
    /* <criteria> */ select
        p1_0.id,
        p1_0.content,
        p1_0.title 
    from
        post p1_0
Hibernate: 
    /* insert for
        com.woolog.domain.Post */insert 
    into
        post (content, title, id) 
    values
        (?, ?, default)
Hibernate: 
    select
        p1_0.id,
        p1_0.content,
        p1_0.title 
    from
        post p1_0 
    where
        p1_0.id=?

MockHttpServletRequest:
      HTTP Method = PATCH
      Request URI = /posts/2
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"59"]
             Body = {"title":"수정 후 제목","content":"수정 후 내용"}
    Session Attrs = {}

Handler:
             Type = com.woolog.controller.PostController
           Method = com.woolog.controller.PostController#edit(Long, PostEdit)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.woolog.exception.PostNotFound

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"status":404,"code":"NOT_FOUND","description":"잘못된 요청입니다.","data":[{"field":"postId","message":"존재하지 않는 글입니다."}]}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    /* <criteria> */ select
        p1_0.id,
        p1_0.content,
        p1_0.title 
    from
        post p1_0
Hibernate: 
    /* delete for com.woolog.domain.Post */delete 
    from
        post 
    where
        id=?

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /posts
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"43"]
             Body = {"title":"제목입니다.","content":null}
    Session Attrs = {}

Handler:
             Type = com.woolog.controller.PostController
           Method = com.woolog.controller.PostController#write(PostCreate)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.bind.MethodArgumentNotValidException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"status":400,"code":"BAD_REQUEST","description":"잘못된 입력 값입니다.","data":[{"field":"content","message":"내용을 입력해주세요."}]}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    /* <criteria> */ select
        p1_0.id,
        p1_0.content,
        p1_0.title 
    from
        post p1_0
Hibernate: 
    /* insert for
        com.woolog.domain.Post */insert 
    into
        post (content, title, id) 
    values
        (?, ?, default)
Hibernate: 
    select
        p1_0.id,
        p1_0.content,
        p1_0.title 
    from
        post p1_0 
    where
        p1_0.id=?

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /posts/3
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.woolog.controller.PostController
           Method = com.woolog.controller.PostController#get(Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.woolog.exception.PostNotFound

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"status":404,"code":"NOT_FOUND","description":"잘못된 요청입니다.","data":[{"field":"postId","message":"존재하지 않는 글입니다."}]}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    /* <criteria> */ select
        p1_0.id,
        p1_0.content,
        p1_0.title 
    from
        post p1_0
Hibernate: 
    /* delete for com.woolog.domain.Post */delete 
    from
        post 
    where
        id=?

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /posts
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"33"]
             Body = {"title":null,"content":"내용"}
    Session Attrs = {}

Handler:
             Type = com.woolog.controller.PostController
           Method = com.woolog.controller.PostController#write(PostCreate)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.bind.MethodArgumentNotValidException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"status":400,"code":"BAD_REQUEST","description":"잘못된 입력 값입니다.","data":[{"field":"title","message":"제목을 입력해주세요."}]}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    /* <criteria> */ select
        p1_0.id,
        p1_0.content,
        p1_0.title 
    from
        post p1_0
Hibernate: 
    /* insert for
        com.woolog.domain.Post */insert 
    into
        post (content, title, id) 
    values
        (?, ?, default)
Hibernate: 
    select
        p1_0.id,
        p1_0.content,
        p1_0.title 
    from
        post p1_0 
    where
        p1_0.id=?

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /posts/4
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.woolog.controller.PostController
           Method = com.woolog.controller.PostController#delete(Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.woolog.exception.PostNotFound

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"status":404,"code":"NOT_FOUND","description":"잘못된 요청입니다.","data":[{"field":"postId","message":"존재하지 않는 글입니다."}]}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: 
    /* <criteria> */ select
        p1_0.id,
        p1_0.content,
        p1_0.title 
    from
        post p1_0
Hibernate: 
    /* delete for com.woolog.domain.Post */delete 
    from
        post 
    where
        id=?

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /posts
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"29"]
             Body = {"title":null,"content":null}
    Session Attrs = {}

Handler:
             Type = com.woolog.controller.PostController
           Method = com.woolog.controller.PostController#write(PostCreate)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.bind.MethodArgumentNotValidException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"status":400,"code":"BAD_REQUEST","description":"잘못된 입력 값입니다.","data":[{"field":"content","message":"내용을 입력해주세요."},{"field":"title","message":"제목을 입력해주세요."}]}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
